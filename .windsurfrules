# AGENTS Development Guidelines for Emoji Smith

This document summarizes the **canonical rules** that **any automated or AI-powered coding agent** (ChatGPT, Claude, Copilot, etc.) **MUST** follow when contributing to the *Emoji Smith* repository.  The content mirrors the human-readable standards in `CLAUDE.md` and is kept intentionally concise so it can be embedded easily in prompt templates.

> **If a guideline here ever appears to conflict with `CLAUDE.md`, the instructions in `CLAUDE.md` win.**  Under normal circumstances the two files are consistent.

---

## 1. Environment & Tooling

1. Python 3.12 is **mandatory**.
2. Use `uv` for dependency management.
3. A virtual-environment **must** be activated (`.venv`) before running *any* command.
4. Formatting, linting, type-checking, security scans and tests **must** pass before a PR is considered complete:

   ```bash
   black --check src/ tests/
   flake8 src/ tests/
   mypy src/
   bandit -r src/
   pytest --cov=src tests/
   ```

## 2. Coding Style & Architecture

1. Follow PEP-8 as auto-formatted by **black**.
2. Add **type hints** everywhere.
3. Prefer **dataclasses** for simple data structures.
4. Adopt **Domain-Driven Design (DDD)** and the **Repository Pattern**:
   * Domain entities / value objects first.
   * Repository interfaces in the domain layer; concrete implementations in `infrastructure/`.
   * Inject dependencies – never instantiate SDK clients inside domain code.
5. Public interfaces are stable; implementation details may change – **test behaviour, not implementation**.

## 3. Test-Driven Development Workflow

1. Follow the *Red → Green → Refactor* cycle for every feature.
2. Maintain a healthy test pyramid: many unit tests, fewer integration tests, almost no E2E.
3. Unit tests must run in < 1 second – mock external services.
4. Minimum coverage: **90 %** (enforced in CI).

## 4. Security Rules (hard requirements)

1. **NEVER** run `git add .`; always stage files explicitly.
2. **NEVER** commit secrets, tokens, credentials or `.env` files.
3. Run **bandit** and fix all medium/high severity findings.
4. Production secrets live exclusively in **AWS Secrets Manager**; local secrets in untracked `.env` files.

## 5. Commit & PR Hygiene

1. Use the *feature-branch* workflow (`feature/short-description`).
2. Squash-merge to `main` after review; `main` auto-deploys to Lambda via CDK.
3. Commit messages follow the Conventional Commits style, e.g. `feat: add emoji resize service`.

## 6. Lambda & Deployment-specific Notes

1. The project is deployed as a **containerised AWS Lambda** behind an HTTP API Gateway.
2. The entry-point is `src/emojismith/lambda_handler.py` using **Mangum** to bridge FastAPI ⇢ Lambda.
3. CI/CD pipeline stages:
   * Code quality
   * Security scan
   * Tests & coverage
   * Docker build & push
   * `cdk deploy`

## 7. Quick-Start Commands (for agents that run code)

```bash
# create venv & install dev deps
uv venv && source .venv/bin/activate
uv pip install -r requirements-dev.lock

# run all quality gates
black --check src/ tests/
flake8 src/ tests/
mypy src/
bandit -r src/
pytest --cov=src --cov-fail-under=90 tests/
```

## 8. Checklist Before Opening a Pull Request

☑️ All new/updated code has **unit tests**  
☑️ All quality gates pass locally (formatter, linter, mypy, bandit, tests)  
☑️ Only the intended files are staged (no `git add .`)  
☑️ No secrets or credentials are present  
☑️ Documentation is updated when behaviour changes  

---

### Short Rules for Prompt Inclusion

The following single-sentence reminders are safe to embed directly in an LLM prompt:

* “Use Python 3.12 and format with **black**.”
* “Write tests first and keep coverage ≥ 90 %.”
* “Never commit secrets or use `git add .`.”
* “Apply the Repository Pattern and inject dependencies.”

---

## 9. Attribution & Maintenance

This file is autogenerated from `CLAUDE.md`. Keep them in sync; when `CLAUDE.md` changes, regenerate `AGENTS.md` in the same PR.
