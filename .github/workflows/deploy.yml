name: Deploy Emoji Smith

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Stage 1: Code Quality
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Code formatting check
      run: |
        uv run ruff format --check src/ tests/

    - name: Lint with ruff
      run: |
        uv run ruff check src/ tests/

    - name: Type checking with mypy
      run: |
        uv run mypy src/

  # Stage 2: Security (already covered by ruff in code-quality)
  # Keeping this stage as a placeholder for future security-specific tools
  security:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - run: echo "Security checks already performed by ruff in code-quality stage"

  # Stage 3: Testing - Split by test categories
  unit-tests:
    runs-on: ubuntu-latest
    needs: security
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run unit tests
      run: |
        uv run pytest -m unit --cov=src --cov-report=xml tests/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit
        name: unit-coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: security
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run integration tests
      run: |
        uv run pytest -m integration --cov=src --cov-report=xml tests/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-coverage

  contract-security-tests:
    runs-on: ubuntu-latest
    needs: security
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run contract and security tests
      run: |
        uv run pytest -m "contract or security" tests/

  performance-tests:
    runs-on: ubuntu-latest
    needs: security
    # Performance tests can be allowed to fail without blocking deployment
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run performance tests
      run: |
        uv run pytest -m performance tests/

  # Stage 4: Build (Docker image and ECR push)
  build:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, contract-security-tests]
    # Run on feature branches (PRs) and main branch (push)
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names emoji-smith || \
        aws ecr create-repository --repository-name emoji-smith

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: emoji-smith
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Stage 5: Deploy (CDK deployment to AWS Lambda)
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # Only deploy on main branch
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Node.js for CDK
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install AWS CDK
      run: npm install -g aws-cdk

    - name: Install uv for webhook package build
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Build webhook package
      run: |
        uv sync --group webhook
        ./scripts/build_webhook_package.sh

    - name: Install CDK dependencies
      working-directory: ./infra
      run: |
        python -m venv .venv
        source .venv/bin/activate
        pip install -r requirements.txt

    - name: CDK Deploy with new image
      working-directory: ./infra
      env:
        IMAGE_URI: ${{ needs.build.outputs.image-uri }}
      run: |
        source .venv/bin/activate
        cdk deploy --require-approval never --context imageUri=$IMAGE_URI
